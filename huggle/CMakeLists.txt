# This is a build file for Huggle (used with cmake)
cmake_minimum_required (VERSION 2.8.7)

set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build, options are: Debug or Release (or any other documented for CMAKE_BUILD_TYPE")
set(INSTALL_BIN_DIR bin CACHE PATH "Installation directory for executables")
set(INSTALL_LIB_DIR lib CACHE PATH "Installation directory for libraries")
set(INSTALL_DATA_DIR share/${PROJECT_NAME} CACHE PATH "Installation directory for data files")

#set(CMAKE_CXX_STANDARD 11)
project(huggle)
execute_process(COMMAND "${CMAKE_SOURCE_DIR}/build/prepare_cmake.sh" WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
if (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} GREATER 3.0)
    # Visual Studio
    add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)
endif()
execute_process(COMMAND "${CMAKE_SOURCE_DIR}/update.sh" WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
#  cmake <folder> -DQT5_BUILD=true
option(LIBCORE "Build huggle_core library" false)
option(LINUX_SNAP "Enable support for snap, use this option only if you are building snapshotable version" false)
option(PYTHON_BUILD "Build Huggle with python" false)
option(QT5_BUILD "Build Huggle using the Qt5 framework" true)
option(HUGGLE_EXT "Build Huggle extensions" false)
option(WEB_ENGINE "Use Qt WebEngine instead of WebKit library" false)
option(AUDIO "Enable audio backend" true)

if (NOT AUDIO)
    add_definitions(-DHUGGLE_NOAUDIO)
endif()

if (WEB_ENGINE)
    add_definitions(-DHUGGLE_WEBEN)
endif()

if (LINUX_SNAP)
    add_definitions(-DHUGGLE_SNAP)
endif()

# Enable c++11
if(WIN32)
    if(MINGW)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mwindows -std=c++11")
    endif()
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
endif()

# This will ensure that produced binaries go to right place on windows
if(NOT MINGW AND WIN32)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_BINARY_DIR}/Release)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_BINARY_DIR}/Debug)
endif()
add_subdirectory(libs/libirc/libirc libirc)
add_subdirectory(libs/libirc/libircclient libircclient)

# YAML
option(YAML_CPP_BUILD_TOOLS "Disable tests" OFF)
option(BUILD_SHARED_LIBS "Build as shared" ON)
include_directories("libs/yaml-cpp/include/")
add_subdirectory(libs/yaml-cpp)
if (HUGGLE_EXT)
    if(NOT MINGW AND WIN32)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_BINARY_DIR}/Release/extensions)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_BINARY_DIR}/Debug/extensions)
    endif()
    if (QT5_BUILD)
        add_subdirectory(extension_list/extension-scoring/)
    endif()
    add_subdirectory(extension_list/extension-thanks/)
    add_subdirectory(extension_list/enwiki/)
    add_subdirectory(extension_list/mass-delivery/)
    add_subdirectory(extension_list/extension-splitter-helper/)
    add_subdirectory(extension_list/extension-mass-delete/)
    add_subdirectory(extension_list/extension-flow/)
    if(WIN32 AND NOT MINGW)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE)
    endif() 
endif()
set(QT_USE_QTNETWORK true)
set(QT_USE_QTXML true)
set(QT_USE_QTWEBKIT true)
set(CMAKE_include_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
#### Qt 4 AND 5 ####
if(QT5_BUILD)
    find_package(Qt5Core REQUIRED)
    find_package(Qt5Gui REQUIRED)
    find_package(Qt5Xml REQUIRED)
    find_package(Qt5Widgets REQUIRED)
    find_package(Qt5Network REQUIRED)
    set(QT_INCLUDES ${Qt5Gui_INCLUDE_DIRS} ${Qt5Widgets_INCLUDE_DIRS} ${Qt5Network_INCLUDE_DIRS} ${Qt5Xml_INCLUDE_DIRS} ${Qt5Svg_INCLUDE_DIRS})
    if (NOT WEB_ENGINE)
        find_package(Qt5WebKit REQUIRED)
        set(QT_INCLUDES ${QT_INCLUDES} ${Qt5WebKit_INCLUDE_DIRS})
    else()
        find_package(Qt5WebEngine REQUIRED)
        find_package(Qt5WebEngineWidgets REQUIRED)
        set(QT_INCLUDES ${QT_INCLUDES} ${Qt5WebEngine_INCLUDE_DIRS})
    endif()
    if (AUDIO)
        find_package(Qt5Multimedia REQUIRED)
        set(QT_INCLUDES ${QT_INCLUDES} ${Qt5Multimedia_INCLUDE_DIRS})
    endif()
    include_directories(${QT_INCLUDES})
else()
    find_package(Qt4 REQUIRED)
endif()
if (PYTHON_BUILD)
    find_package(PythonLibs REQUIRED)
    include_directories(${PYTHON_INCLUDE_DIRS})
endif()

file(GLOB srcx "*.cpp")
file(GLOB resx "*.qrc")
file(GLOB uixx "*.ui")
file(GLOB headers "*.hpp")

if (NOT WEB_ENGINE)
    file(GLOB srcx_web "webkit/*.cpp")
    file(GLOB resx_web "webkit/*.qrc")
    file(GLOB uixx_web "webkit/*.ui")
    file(GLOB headers_web "webkit*.hpp")
else()
    file(GLOB srcx_web "web_engine/*.cpp")
    file(GLOB resx_web "web_engine/*.qrc")
    file(GLOB uixx_web "web_engine/*.ui")
    file(GLOB headers_web "web_engine*.hpp")
endif()

set(huggle_SOURCES ${srcx} ${srcx_web})
set(huggle_FORMS ${uixx} ${uixx_web})
set(huggle_RESOURCES ${resx} ${resx_web})
if (AUDIO)
    set(huggle_RESOURCES ${huggle_RESOURCES} "sounds/resources.qrc")
endif()

if(QT5_BUILD)
    QT5_WRAP_CPP(huggle_HEADERS_MOC ${huggle_HEADERS})
    QT5_WRAP_UI(huggle_FORMS_HEADERS ${huggle_FORMS})
    QT5_ADD_RESOURCES(huggle_RESOURCES_RCC ${huggle_RESOURCES})
else()
    QT4_WRAP_CPP(huggle_HEADERS_MOC ${huggle_HEADERS})
    QT4_WRAP_UI(huggle_FORMS_HEADERS ${huggle_FORMS})
    QT4_ADD_RESOURCES(huggle_RESOURCES_RCC ${huggle_RESOURCES})
endif()
if (NOT QT5_BUILD)
    include(${QT_USE_FILE})
endif()
add_definitions(${QT_DEFINITIONS})
add_definitions( -DQT_USE_QSTRINGBUILDER )
if (HUGGLE_EXT OR LIBCORE)
    add_library(huggle_core SHARED ${huggle_SOURCES} ${headers} ${headers_web} ${huggle_HEADERS_MOC} ${huggle_FORMS_HEADERS} ${huggle_RESOURCES_RCC})
    target_link_libraries(huggle_core ${QT_LIBRARIES})
    set_target_properties(huggle_core PROPERTIES COMPILE_FLAGS -DHUGGLE_LIBRARY)
endif()
add_executable(huggle ${huggle_SOURCES} ${headers} ${headers_web} ${huggle_HEADERS_MOC} ${huggle_FORMS_HEADERS} ${huggle_RESOURCES_RCC})
if (NOT PYTHON_BUILD)
    target_link_libraries(huggle ${QT_LIBRARIES})
else()
    if (WIN32)
        add_executable(py_hug ${huggle_SOURCES} ${headers} ${headers_web} ${huggle_HEADERS_MOC} ${huggle_FORMS_HEADERS} ${huggle_RESOURCES_RCC})
        target_link_libraries(huggle ${QT_LIBRARIES})
        target_link_libraries(py_hug ${PYTHON_LIBRARIES} ${QT_LIBRARIES})
        set_target_properties(py_hug PROPERTIES COMPILE_FLAGS -DHUGGLE_PYTHON)
    else()
        add_definitions(-DHUGGLE_PYTHON )
        target_link_libraries(huggle ${PYTHON_LIBRARIES} ${QT_LIBRARIES})
    endif()
endif()
if (WIN32)
    target_link_libraries(huggle dbghelp)
    if (LIBCORE OR HUGGLE_EXT)
        target_link_libraries(huggle_core dbghelp)
    endif()
    if (PYTHON_BUILD)
        target_link_libraries(py_hug dbghelp)
    endif()
endif()

target_link_libraries(huggle irc ircclient yaml-cpp)

if (LIBCORE OR HUGGLE_EXT)
    target_link_libraries(huggle_core irc ircclient yaml-cpp)
endif()

if (QT5_BUILD)
    if (NOT WEB_ENGINE)
        qt5_use_modules(huggle Core Gui Widgets WebKitWidgets WebKit Network Xml)
    else()
        qt5_use_modules(huggle Core Gui Widgets WebEngineWidgets WebEngine Network Xml)
    endif()

    if (AUDIO)
        qt5_use_modules(huggle Multimedia)
    endif()

    if (HUGGLE_EXT OR LIBCORE)
        if (NOT WEB_ENGINE)
            qt5_use_modules(huggle_core Core Gui Widgets WebKitWidgets WebKit Network Xml)
        else()
            qt5_use_modules(huggle_core Core Gui Widgets WebEngine WebEngineWidgets Network Xml)
        endif()
        if (AUDIO)
            qt5_use_modules(huggle_core Multimedia)
        endif()
    endif()
    if (PYTHON_BUILD AND WIN32)
        if (NOT WEB_ENGINE)
            qt5_use_modules(py_hug Core Gui Widgets WebKitWidgets WebKit Network Xml)
        else()
            qt5_use_modules(py_hug Core Gui Widgets WebEngine WebEngineWidgets Network Xml)
        endif()
        if (AUDIO)
            qt5_use_modules(py_hug Multimedia)
        endif()
    endif()
endif()
include_directories(${CMAKE_CURRENT_BINARY_DIR})
install(FILES ${CMAKE_SOURCE_DIR}/man/huggle.1 DESTINATION share/man/man1)
install(FILES ${CMAKE_SOURCE_DIR}/build/huggle.desktop DESTINATION share/applications)
if (HUGGLE_EXT OR LIBCORE)
    INSTALL(TARGETS huggle_core DESTINATION lib)
endif ()
include(${CMAKE_SOURCE_DIR}/CPackInfo)
install(FILES ${CMAKE_SOURCE_DIR}/Resources/huggle3_newlogo.png DESTINATION share/huggle)
install(TARGETS huggle DESTINATION bin)
include(CPack)
